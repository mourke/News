import java.io.*;  //<>//
import java.util.*; 
import java.util.Date; 
import java.io.*; 
import java.util.*; 
import java.util.Date; 
import java.net.URL; 
import java.util.Date; 
import java.util.Optional; 
import java.text.SimpleDateFormat; 

import java.util.HashMap; 
import java.util.ArrayList; 
import java.io.File; 
import java.io.BufferedReader; 
import java.io.PrintWriter; 
import java.io.InputStream; 
import java.io.OutputStream; 
import java.io.IOException; 

int query;  // 
ArrayList<Widget> widgets;
ArrayList<Graph> graphs;
ArrayList<Comment> comments;
ArrayList<Story> stories;
ArrayList<Item> keywordMatches;
ArrayList<Textbox> textboxes;

ArrayList<Comment> matchingComments;
ArrayList<Story> matchingStories;
Textbox queryTextbox; // usernames
Textbox keywordTextbox;
Textbox userpageTextbox;
Graph graph1;
ArrayList<RadioButton> usernameSearchOptions;

DropDownMenu queryOptions;

PImage search;
PFont widgetFont;
PFont usernameFont;
PFont userpageContentHeader;
PFont widgetFontLarger;
PFont quoteFont;

UserPage testUserPage;
boolean userpageSearchFailed;
float averageStoryScore;
float maxStoryScore;
PImage gold;
PImage silver;
PImage bronze;

public void settings() {
  size(SCREEN_WIDTH, SCREEN_HEIGHT);
}

public void setup() {
  comments = new ArrayList<Comment>();
  stories = new ArrayList<Story>();
  textboxes = new ArrayList<Textbox>();

  search = loadImage("search.png");
  usernameFont = loadFont("Ebrima-Bold-64.vlw");
  userpageContentHeader = loadFont("Ebrima-Bold-32.vlw");
  widgetFont = loadFont("LeelawadeeUI-Semilight-32.vlw");
  widgetFontLarger = loadFont("LeelawadeeUI-Semilight-48.vlw");
  quoteFont = loadFont("SansSerif.italic-32.vlw");
  textFont(widgetFont);


  JSONArray array = loadJSONArray("news.json");

  for (int i = 0; i < array.size(); ++i) {
    JSONObject object = array.getJSONObject(i);
    try {
      if (object.getString("type").equals("story")) {
        stories.add(new Story(object));
      } else {
        comments.add(new Comment(object));
      }
    } 
    catch (Exception e) {
      println("line " + i + ": " + e);
    }
  }

  float record = 0;
  try {
    for (Story s : stories) {
      if (s.score() > record) {
        record = s.score();
      }
    }
  } 
  catch (NullPointerException e) {
  }
  maxStoryScore = record;

  //calculate average story score
  float sum = 0;
  try {
    for (Story s : stories) {
      sum+=s.score();
    }
  } 
  catch (NullPointerException n) {
  }
  averageStoryScore = sum/stories.size();

  gold = loadImage("gold.png");
  silver = loadImage("silver.png");
  bronze = loadImage("bronze.png");

  userpageTextbox = new Textbox(50, 50, TEXTBOX_USERPAGE);
  textboxes.add(userpageTextbox);
  query = QUERY_USERPAGE;
  userpageSearchFailed = false;
}

public void draw() {
  background(0);

  switch (query) {
  case QUERY_USERPAGE: 
    for (Textbox t : textboxes) {
      t.draw();
    }

    if (testUserPage != null) {
      testUserPage.draw();
    } else {
      fill(227);
      rect(USERPAGE_FRAME_X, USERPAGE_FRAME_Y, SCREEN_WIDTH, SCREEN_HEIGHT - USERPAGE_FRAME_Y);
    }
    if (userpageSearchFailed) {
      fill(0);
      textFont(widgetFont);
      text("No result found.", USERPAGE_FRAME_X + 50, USERPAGE_FRAME_Y+50+64);
    }
  }
}

public void setUsername(String s) {
  matchingComments = getCommentsByUsername(comments, s);
  matchingStories = getStoriesByUsername(stories, s);
  query = QUERY_COMMENT_BY_USERNAME;
  for (RadioButton r : usernameSearchOptions) {
    if (r.event() == QUERY_COMMENT_BY_USERNAME) {
      r.select();
    }
  }
  // testUserPage = new UserPage(new User(s));
}

public ArrayList<Comment> getCommentsByUsername(ArrayList<Comment> comments, String username) {
  ArrayList<Comment> commentsByUsername = new ArrayList<Comment>();

  for (Comment c : comments) {
    try {
      if (c.author().equalsIgnoreCase(username)) {
        commentsByUsername.add(c);
      }
    } 
    catch (Exception e) {
      //println("Error matching username: " + c + ": " + e);
    }
  }

  return commentsByUsername;
}

public ArrayList<Story> getStoriesByUsername(ArrayList<Story> stories, String username) {
  ArrayList<Story> storiesByUsername = new ArrayList<Story>();

  for (Story s : stories) {
    try {
      if (s.author().equalsIgnoreCase(username)) {
        storiesByUsername.add(s);
      }
    } 
    catch (Exception e) {
      //println("Error matching username: " + s + ": " + e);
    }
  }

  return storiesByUsername;
}

public Item getParent(int id) {
  for (Story s: stories) {
    if (s.id().equals(id)) {
      return s;
    }
  }
  for (Comment c: comments) {
    if (c.id().equals(id)) {
      return c;
    }
  }
  return null;
}

public void setKeyword(String s) {
  keywordMatches = new ArrayList<Item>();
  //search stories for keyword
  for (Story story : stories) {
    if (story.title()!=null) {
      String title = story.title().toLowerCase();
      if (title.contains(s.toLowerCase())) {
        keywordMatches.add(story);
      }
    }
  }
  query = QUERY_STORY_BY_KEYWORD;
}

public void setUserpageSubject(String username) {
  try {
    testUserPage = new UserPage(new User(username));
    userpageSearchFailed = false;
  } 
  catch (Exception e) { // username has no results
    testUserPage = null;
    userpageSearchFailed = true;
  }
}

public void keyPressed() {
  //textboxes
  for (Textbox textbox : textboxes) {
    if (textbox.isSelected()) {
      if (key == BACKSPACE) {
        textbox.removeChar();
      } else if (key == ENTER) {
        textbox.submitQuery();
      } else {
        textbox.appendCharacter(key);
      }
    }
  }

  //userpage
  if (testUserPage != null) {
    if (testUserPage.contentPaneActive()) {
      if (keyCode == RIGHT) {
        testUserPage.advanceContent();
      } else if (keyCode == LEFT) {
        testUserPage.retreatContent();
      }
    }
  }
}

public void mousePressed() {
  //textboxes
  for (Textbox textbox : textboxes) {
    if (textbox.withinBounds(mouseX, mouseY)) {
      textbox.click();
    } else {
      textbox.deselect();
    }
  }

  //userpage
  if (testUserPage != null) {
    if (!testUserPage.itemActive()) {
      println("Item inactive");
      if (testUserPage.contentPaneActive()) {  // runs after second click in content pane
        testUserPage.setActiveItem(mouseY);
      }

      if (testUserPage.contentPaneClicked(mouseX, mouseY)) {
        testUserPage.setContentPaneActive();
      } else {
        testUserPage.setContentPaneInactive();
      }
    } else {
      println("item active");
      //if (testUserPage.linkClicked()) {
      //  testUserPage.openLink();
      //}
      testUserPage.toggleActiveItem();
    }
  }
}
