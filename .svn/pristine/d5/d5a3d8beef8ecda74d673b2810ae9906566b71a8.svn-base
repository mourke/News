import java.text.SimpleDateFormat;

//drawing the username query
class UserPage {

  private User subject;
  private int x;
  private int y;
  private int frameWidth;
  private int frameHeight;
  private String mostRecentActivity;
  private boolean contentPaneActive;
  private ArrayList<Item> content;
  private int contentIndex;


  public UserPage(User subject) {
    this.subject = subject;

    x = USERPAGE_FRAME_X;
    y = USERPAGE_FRAME_Y;
    frameWidth = SCREEN_WIDTH-x;
    frameHeight = SCREEN_HEIGHT-y;

    SimpleDateFormat format = new SimpleDateFormat("EEE, d MMM yyyy HH:mm:ss");
    mostRecentActivity = format.format(subject.lastActivity());

    content = new ArrayList<Item>();
    content.addAll(subject.stories());
    content.addAll(subject.comments());

    contentIndex = 0;
  }

  void draw() {
    //frame
    stroke(0);
    fill(227);
    rect(x, y, frameWidth, frameHeight);

    //username
    fill(0);
    //textSize(64);
    textFont(usernameFont);
    text(subject.username(), x+150, y+50+USERNAME_TEXT_SIZE);

    //profile pic
    fill(255);
    rect(x+150, y+2*50+USERNAME_TEXT_SIZE, 256, 256);

    // content
    fill(0);
    textFont(widgetFont);
    text("Top Score:    "+subject.topScore(), frameWidth/2, 2*y+50+USERNAME_TEXT_SIZE);
    text("Total Contributions:    "+subject.numContributions(), frameWidth/2, 2*y+50+USERNAME_TEXT_SIZE+2*WIDGET_TEXT_SIZE);
    text("Last Activity:    "+mostRecentActivity, frameWidth/2, 2*y+50+USERNAME_TEXT_SIZE+4*WIDGET_TEXT_SIZE);

    //divider
    stroke(198);
    line(0, USERPAGE_CONTENT_DIVIDER_Y, SCREEN_WIDTH, USERPAGE_CONTENT_DIVIDER_Y);
    if (contentPaneActive) {
      stroke(171, 213, 245);
      fill(237, 244, 250);
    } else {
      stroke(198);
      fill(255);
    }
    rect(0, USERPAGE_CONTENT_DIVIDER_Y+1, SCREEN_WIDTH, SCREEN_HEIGHT - USERPAGE_CONTENT_DIVIDER_Y);

    //content (3 printed per page);
    if (content.size()!=0) {
      textFont(widgetFont);
      fill(0);
      try {
        textFont(userpageContentHeader);
        for (int i=contentIndex; i<contentIndex+3; i++) {
          
        }
        Item item1 = content.get(contentIndex);
        text(content.get(contentIndex).toString(), x+50, USERPAGE_CONTENT_DIVIDER_Y + 30 * 3);
        text(content.get(contentIndex+1).toString(), x+50, USERPAGE_CONTENT_DIVIDER_Y + 30 * 6);
        text(content.get(contentIndex+2).toString(), x+50, USERPAGE_CONTENT_DIVIDER_Y + 30 * 9);
      } 
      catch (Exception e) {  // null pointer if not a multiple of 3
      }
    }
  }

  void setContentPaneActive() {
    contentPaneActive = true;
  }

  void setContentPaneInactive() {
    contentPaneActive = false;
  }

  boolean contentPaneActive() {
    return contentPaneActive;
  }

  boolean contentPaneClicked(int mX, int mY) {
    return (mX>=0&&mX<=SCREEN_WIDTH&&mY>=USERPAGE_CONTENT_DIVIDER_Y&&mY<SCREEN_HEIGHT);
  }

  void advanceContent() {
    println("Content index: " + contentIndex + ", content size: " + content.size());
    if (contentIndex+3 < content.size()) {  //dont allow to show a set of 3 empty queries (past size)
      contentIndex+=3;
    }
  }

  void retreatContent() {
    if (contentIndex-3 >= 0) {  //dont allow to go too far back
      contentIndex-=3;
    }
  }
}
