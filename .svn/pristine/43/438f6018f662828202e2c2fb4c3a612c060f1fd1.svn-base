code:
news:{
Graph graph1;
int screen = 1;

	graph1 = new Graph(0, 0, 0, graphs, "", 1553174124, stories,6);
	
 Widget storiesButton = new Widget(150, 200, 100, 200, 150, 255, "Stories", DISPLAY_STORIES);
  Widget graphButton = new Widget(150, 400, 100, 200, 200, 255, "Graph", DISPLAY_DAILY_GRAPH);
  widgets.add(storiesButton);
  widgets.add(graphButton);
}
  
  draw:{
  
  for (int i =0; i <widgets.size(); i++) {
    widgets.get(i).draw();
    if(widgets.get(i).widgetClicked(mouseX, mouseY) == true){
     screen = widgets.get(i).event;
   }
     
  }
  switch (screen) {
    case(DISPLAY_DAILY_GRAPH):
    graph1.draw();
  //  fill(255);
    // rect(500,500,300,300);

    break;
    case(DISPLAY_STORIES):

    switch (query) {
      case (QUERY_COMMENT_BY_USERNAME):
      String output = "";
      for (Comment c : matchingComments) {
        output=output+c.toString()+"\n\n";
        text(output, 0, 0, SCREEN_WIDTH, SCREEN_HEIGHT);
      }
      break;
      case (QUERY_STORY_BY_USERNAME):
      output = "";
      for (Story s : matchingStories) {
        output=output+s.toString()+"\n\n";
        text(output, 0, 0, SCREEN_WIDTH, SCREEN_HEIGHT);
      }
      break;
    }


    break;
    case (QUERY_STORY_BY_KEYWORD):
    output = "";
    for (Item s : keywordMatches) {
      output=output+s.toString()+"\n\n";
      text(output, 0, 0, SCREEN_WIDTH, SCREEN_HEIGHT);
    }
    break;
  }
  }
  
  constants:{
  final int DISPLAY_STORIES = 6;
final int DISPLAY_DAILY_GRAPH = 2;
  }

graph:

import java.io.*; //<>//
import java.util.*;
class Graph extends Widget {
  private ArrayList <Story> storyArray;
  private ArrayList <Graph> graphArray;
  private Map<Long, Item> mainMap=new TreeMap<Long, Item>();
  int chart[]; 
  int s;
  int timeB;
  int timeA;
  int barX = 100;
  int amountOfdays;
  int widthOfbars;

  public Graph(int xpos, int ypos, int event, ArrayList<Graph> graphArray, String label, int timeA, ArrayList<Story> storyArray, int window) {    
    super(xpos, ypos, WIDGET_HEIGHT, WIDGET_WIDTH, color(255), color(0), label, event);
    this.graphArray = graphArray;
    this.storyArray = storyArray;
    this.mainMap = mainMap;
    s = 1160423503;
    timeA = s;
    chart = new int[window];
    amountOfdays = window;
   
  }

  @Override
    public void draw () {
    //background(255); 
    textSize(WIDGET_TEXT_SIZE);
    fill(255);

    text(label(), xpos(), ypos());
    

    widthOfbars = (int) 800 / amountOfdays;
    int currentDay = s;


      for(int index = 0;index < chart.length;index++) {
      println(index);

      chart[index] = this.getHeight(storyArray, currentDay);
      currentDay = currentDay + 86400 ;

    }
      
      barX =50;
      for (int idx= 0; idx<chart.length; idx++) {
      fill(75, 75, 75);
      println(chart[idx]);
      rect(barX, 1080-50-(chart[idx]*15), 50, chart[idx]*15);
      text(("day "+(idx+1)),barX, 1080-40,150,50);
      barX += widthOfbars;
    }

    
  }






  int getHeight(ArrayList<Story> storyArray, int timeA) {
    int freqCount = 0;
    println(timeA);
    timeB = timeA + 86400 ;
    for (int i = 0; i < storyArray.size(); i++) {
     

      if (storyArray.get(i).getTime() >= timeA && storyArray.get(i).getTime() <= timeB) {
        freqCount++;
      }
    }
    println(freqCount);
    return freqCount;
  }
  Date getStartingDate() {
    return new Date(s * 1000);
  }
  Date getEndDate() {
    return new Date(timeB * 1000);
  }
}
  
  
  item:{
  
   long getTime(){
   return unixTime; 
  }
  
  }
  